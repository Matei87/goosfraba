{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["GET_POSTS","gql","App","data","useQuery","january","february","march","april","may","june","july","august","september","october","november","december","allPosts","map","item","date","Date","Number","month","getMonth","push","myDates","letter","frequency","length","margin","top","bottom","left","right","xMax","yMax","x","d","y","xScale","scaleBand","range","round","domain","padding","yScale","scaleLinear","Math","max","compose","scale","accessor","xPoint","yPoint","className","style","textAlign","width","height","i","barHeight","Group","Bar","bandwidth","fill","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9e45f53f.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport { useQuery, gql } from '@apollo/client';\n\nimport { Group } from '@visx/group';\nimport { Bar } from '@visx/shape';\nimport { scaleLinear, scaleBand } from '@visx/scale';\n\n\nconst GET_POSTS = gql`{\n  allPosts(count:30000) {\n    createdAt\n  }\n}`;\n\n\nconst App = () => {\n  const { data } = useQuery(GET_POSTS);\n\n  if (data) {\n    let january = [];\n    let february = [];\n    let march = [];\n    let april = [];\n    let may = [];\n    let june = [];\n    let july = [];\n    let august = [];\n    let september = [];\n    let october = [];\n    let november = [];\n    let december = [];\n\n    data.allPosts.map(item => {\n      let date = new Date(Number(item['createdAt']));\n      let month = date.getMonth() + 1;\n      if (month === 1) {\n        january.push(date)\n      }\n      if (month === 2) {\n        february.push(date)\n      }\n      if (month === 3) {\n        march.push(date)\n      }\n      if (month === 4) {\n        april.push(date)\n      }\n      if (month === 5) {\n        may.push(date)\n      }\n      if (month === 6) {\n        june.push(date)\n      }\n      if (month === 7) {\n        july.push(date)\n      }\n      if (month === 8) {\n        august.push(date)\n      }\n      if (month === 9) {\n        september.push(date)\n      }\n      if (month === 10) {\n        october.push(date)\n      }\n      if (month === 11) {\n        november.push(date)\n      }\n      if (month === 12) {\n        december.push(date)\n      }\n    })\n\n    const myDates = [{ letter: \"A\", frequency: january.length },\n    { letter: \"B\", frequency: february.length }, { letter: \"C\", frequency: march.length },\n    { letter: \"D\", frequency: april.length }, { letter: \"E\", frequency: may.length },\n    { letter: \"F\", frequency: june.length }, { letter: \"G\", frequency: july.length },\n    { letter: \"H\", frequency: august.length }, { letter: \"I\", frequency: september.length },\n    { letter: \"K\", frequency: october.length }, { letter: \"L\", frequency: november.length },\n    { letter: \"M\", frequency: december.length }];\n    //console.log(myDates);\n\n    // Define the graph dimensions and margins\n    const width = 500;\n    const height = 500;\n    const margin = { top: 20, bottom: 20, left: 20, right: 20 };\n\n    // Then we'll create some bounds\n    const xMax = width - margin.left - margin.right;\n    const yMax = height - margin.top - margin.bottom;\n\n    // We'll make some helpers to get at the data we want\n    const x = d => d.letter;\n    const y = d => +d.frequency * 100;\n\n    // And then scale the graph by our data\n    const xScale = scaleBand({\n      range: [0, xMax],\n      round: true,\n      domain: myDates.map(x),\n      padding: 0.4,\n    });\n    const yScale = scaleLinear({\n      range: [yMax, 0],\n      round: true,\n      domain: [0, Math.max(...myDates.map(y))],\n    });\n\n    // Compose together the scale and accessor functions to get point functions\n    const compose = (scale, accessor) => data => scale(accessor(data));\n    const xPoint = compose(xScale, x);\n    const yPoint = compose(yScale, y);\n\n\n\n    return (\n      <div className=\"App\">\n        <h1 style={{ textAlign: 'center' }}>GraphQL 2019 Posts</h1>\n\n        <svg width={width} height={height}>\n          {myDates.map((d, i) => {\n            const barHeight = yMax - yPoint(d);\n            return (\n              <Group key={`bar-${i}`}>\n                <Bar\n                  x={xPoint(d)}\n                  y={yMax - barHeight}\n                  height={barHeight}\n                  width={xScale.bandwidth()}\n                  fill=\"#fc2e1c\"\n                />\n              </Group>\n            );\n          })}\n        </svg>\n\n      </div>\n    );\n  } else {\n    return <div className=\"App\">\n      <h1 style={{ textAlign: 'center' }}>GraphQL 2019 Posts</h1>\n      <p>Loading...</p>\n    </div>\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// APOLLO\nimport { ApolloProvider } from '@apollo/client/react';\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'https://fakerql.goosfraba.ro/graphql',\n  cache: new InMemoryCache()\n});\n\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}